;RUNTIME
	;INITIALIZE STACK
	;PUT A NUMBER IN R5
	;CALL MAIN
;int main() {
;	int x = 5;
;	int y = 4;
;	int z;
;	z = mult(x,y)
;	return 0;
;}
;int mult(int a, int b) {
;	int temp = 0;
;	if (b == 0) {
;		temp = 0;
;	} else {
;		temp = a + mult(a, b - 1);
;	}
;	return temp;
;}


.orig x3000
LD R6, STKINIT   ; INITIALIZE STACK POINTER
LD R5, SOMEVALUE ; PUT A VALUE IN R5
JSR MAIN

HALT


STKINIT .fill x6000
SOMEVALUE .fill x0999


MAIN
	ADD R6, R6, -4 ; LEAVE ROOM FOR RV, RA, OLD FP, FIRST TEMP
	STR R7, R6, 2  ; STORE RA
	STR R5, R6, 1  ; STORE OLD FRAMEPOINTER
	ADD R5, R6, 0  ; ESTABLISH FRAMEPOINTER
	ADD R6, R6, -2 ; ALLOCATE SPACE FOR Y AND Z, (ALREADY ALLOCATED X)
	ADD R6, R6, -1 ; SPACE FOR R0 SAVE
	STR R0, R5, -3 ; SAVE VALUE IN R0 JUST IN CASE
	LD R0, FIVE	   ; INITIALIZE X AND Y
	STR R0, R5, 0  ; 
	LD R0, FOUR
	STR R0, R5, -1 ;
	ADD R6, R6, -1 ;
	LDR R0, R5, -1 ; GET VALUE OF Y
	STR R0, R6, 1  ; PUT ONTO STACK
	LDR R0, R5, 0  ; GET VALUE OF X
	STR R0, R6, 0  ; PUT ONTO STACK
	JSR MULT       ; CALL SUBROUTINE
	LDR R0, R6, 0  ; GET ANSWER OFF OF STACK
	ADD R6, R6, 1  ; 
	STR R0, R5, -2 ;
	AND R0, R0, 0  ; MAKE A ZERO
	STR R0, R5, 3  ; PUT 0 IN RV
	LDR R0, R5, -1 ; RESTORE R0
	ADD R6, R5, 1  ; POSITION STACK POINTER AT OLD FP
	LDR R5, R6, 0  ; RESTORE OLD FP
	ADD R6, R6, 1  ; POINT AT RA
	LD R7, R6, 0   ; PUT RA IN R7
	ADD R6, R6, 1  ; POINT AT RV
	RET


FOUR .fill 4
FIVE .fill 5


MULT
	ADD R6, R6, -4 ; ALLOCATE THE FIRST PART OF FRAME
	STR R7, R6, 2  ; STORE RA
	STR R5, R6, 1  ; STORE OLD FP
	ADD R5, R6, 0  ; ESTABLISH FRAMEPOINTER
	ADD R6, R6, -2 ; ALLOCATE SPACE FOR SAVED REGISTERS
	STR R0, R6, 1  ;
	STR R1, R6, 0  ;
	;START ACTUAL FUNCTION
	LDR R0, R5, 5  ; GET B
	BRp RECURSE
	STR R0, R5, 0  ; STORE VALUE OF TEMP
CHUCKIE
	LDR R0, R5, 0  ; PUT TEMP IN R0
	STR R0, R5, 3  ; PUT TEMP IN RV
	LDR R0, R5, -1 ; RESTORE R0 
	LDR R1, R5, -2 ; RESTORE R1
	ADD R6, R5, 1  ; MAKE STACKPOINTER AT OLD FRAMEPOINTER
	LDR R5, R6, 0  ; RESTORE OLD FP
	LDR R7, R6, 1  ; RESTORE RA
	ADD R6, R6, 2  ;
	RET

RECURSE
	LDR R0, R5, 5  ; PUT B IN R0
	ADD R0, R0, -1 ; SUBTRACT ONE
	ADD R6, R6, -2 ;
	STR R0, R6, 1  ;
	LDR R0, R5, 4  ; GET A
	STR R0, R6, 0  ; PUT A ON STACK
	JSR MULT
	LDR R0, R6, 0  ; PUT ANSWER IN R0
	LDR R1, R5, 4  ; PUT A IN R1
	ADD R0, R0, R1 ; A+MULT(A, B-1)
	STR R0, R5, 0  ; STORE IN TEMP
	BR CHUCKIE