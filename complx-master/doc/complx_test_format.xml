<?xml version="1.0"?>
<test-suite>
    <!-- Hello this is a comment in xml -->
	<!-- Test case you may have multiple of these --> 
	<test-case>
		<!-- Test case name --> 
		<name>Default</name>
		<!-- Enable true traps for this test the default is 0 (false) --> 
		<true-traps>0</true-traps>
		<!-- This flag determines if the test has a time limit in number of instructions default is 0 (false). Best practice is to always use this. --> 
		<has-max-executions>0</has-max-executions>
		<!-- The maximum number of instructions to run for.  Only works if the above flag for has-max-executions is 1 (true) --> 
		<max-executions>1000000</max-executions>
		<!-- Randomize memory before the test default is 0 (false)--> 
		<randomize>0</randomize>
		<!-- Enable interrupts for this test the default is 0 (false)--> 
		<interupt-enabled>0</interupt-enabled>
		<!-- Specify the inputs to your assembly code here --> 
		<!-- For both addresses and values you can use expressions beware that you will need to write the expression as the following <![CDATA[your expression here]]> -->
		<input>
			<!-- A value, whatever value at the label or address will be replaced by the value, here  MEM[A] = 157-->
			<test-value><address>A</address><value>157</value></test-value>
			<!-- You can even use expressions to specify values will evaluate to whatever A's address is + 1 subtracted by R0's value-->
			<test-value><address>A2</address><value>A + 1 - R0</value></test-value>
			<!-- A pointer the address is treated to contain an address whose contents will be replaced by the value, here MEM[MEM[B]] = 7-->
			<test-pointer><address>B</address><value>7</value></test-pointer>
			<!-- Sets the register to be a specified value -->
			<test-register><register>R6</register><value>80</value></test-register>
			<!-- Sets the PC to be a specified value -->
			<test-pc><value>x5000</value></test-pc>
			<!-- An array the address is treated to contain an address.  The contents starting at that address will sequentially be replaced by the values in the array -->
			<!-- here MEM[MEM[C] + 0] = 7, MEM[MEM[C] + 1] = 5, and so on -->
			<test-array><address>C</address><value>7,5,3,2,3,4,2,3,1,90</value></test-array>
			<!-- A string again the address is treated to contain an address, The contents starting at that address will sequentially be replaced by the characters in the string + the nul character-->
			<!-- here MEM[MEM[D] + 0] = 'H', MEM[MEM[D] + 1] = 'E', ... , MEM[MEM[D] + 13] = 0 (the nul character) -->
			<test-string><address>D</address><value>HELLO WORLD!</value></test-string>
			<!-- Specify console input here -->
			<test-stdin><value>HERE IS SOME INPUT</value></test-stdin>
		</input>
		<output>
			<!-- valid conditions for value/pointer/register/pc are equals, notEquals, less, greater, lessOrEquals, greaterOrEquals -->
			<!-- A condition is used here to show the syntax for one -->
			<test-value condition="equals"><address>E</address><value>158</value></test-value>
			<test-pointer><address>F</address><value>8</value></test-pointer>
			<!-- valid conditions for array are equals, notEquals -->
			<test-array><address>G</address><value>8,6,4,3,4,5,3,4,2,91</value></test-array>
			<!-- valid conditions for string/output are equals, notEquals, equalsIgnoreCase, notEqualsIgnoreCase, contains, notContains, containsIgnoreCase, notContainsIgnoreCase -->
			<test-string><address>H</address><value>!DLROW OLLEH</value></test-string>
			<!-- Specify console output here-->
			<test-stdout><value>HERE IS SOME OUTPUT</value></test-stdout>
		</output>
	</test-case>
</test-suite>
